UCOM Version: 1.0.0
Pipeline config file: pipeline.Rprofile
Start time: 2019-08-18 17:02:04
Start running.....



Script: src/sites-spec/Albania_Jasini/integrity_check.R
===== Loading data =====
Only one data set available for this site
Raw Data: raw_data/Albania_Jasini/Albania_Jasini_Paper.xlsx
Rows dropped: 1
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
Converting "." to NA
[1] TRUE
Check with itself: Passed!
Manual transformation for future merging:
1. map "gender" to "Male" ~ 1 or "Female" ~ 2
2. Filter rows with impossible values
Transformation done.
===== Writing results =====
Output path: cleaned_data/Albania_Jasini
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: ALB
Site: Albania_Jasini
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Arizona_Croft/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Arizona_Croft/Arizona_Croft_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Arizona_Croft/Arizona_Croft_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Convert StartDate EndDate =====
Conversion done.
===== Writing results =====
Output path: cleaned_data/Arizona_Croft
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: USA
Site: Arizona_Croft
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Australia_Anderson/integrity_check.R
===== Loading data =====
Only numeric data available for this site
Raw Data: raw_data/Australia_Anderson/Australia_Anderson_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
Only Choice value data: NO checked!
Manual convert StartDate, EndDate
Done
===== Writing results =====
Output path: cleaned_data/Australia_Anderson
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: AUS
Site: Australia_Anderson
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Australia_DarNimrod/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Australia_DarNimrod/Australia_DarNimrod_NonSONA.sav
Rows dropped: 0
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Australia_DarNimrod/Australia_DarNimrod_SONA.sav
Rows dropped: 0
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
No check for this! Only one data set
===== Writing results =====
Output path: cleaned_data/Australia_DarNimrod
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: AUS
Site: Australia_DarNimrod
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Belgium_Vangrootel/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Belgium_Vangrootel/Belgium_Vangrootel_NumericValues.csv
Rows dropped: 0
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Belgium_Vangrootel/Belgium_Vangrootel_ChoiceValues.sav
Rows dropped: 0
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Belgium_Vangrootel
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: BEL
Site: Belgium_Vangrootel
=== Writing out CSV ===
Sucessfully write results!



Script: ./src/sites-spec/Bolivia_Schulmeyer/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Bolivia_Schulmeyer/Bolivia_Schulmeyer_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Bolivia_Schulmeyer/Bolivia_Schulmeyer_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Bolivia_Schulmeyer
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: BOL
Site: Bolivia_Schulmeyer
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Canada_Block/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Canada_Block/Canada_Block_PART1_NumericValues.csv
Rows dropped: 2
Raw Data: raw_data/Canada_Block/Canada_Block_PART2_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Canada_Block/Canada_Block_PART1_ChoiceValues.csv
Rows dropped: 2
Raw Data: raw_data/Canada_Block/Canada_Block_PART2_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Canada_Block
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: CAN
Site: Canada_Block
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Canada_Hall/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Canada_Hall/Canada_Hall_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Canada_Hall/Canada_Hall_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Canada_Hall
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: CAN
Site: Canada_Hall
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Canada_Steele/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Canada_Steele/Canada_Steele_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Canada_Steele/Canada_Steele_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Canada_Steele
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: CAN
Site: Canada_Steele
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Chile_Gonzalez/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Chile_Gonzalez/Chile_Gonzalez_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Chile_Gonzalez/Chile_Gonzalez_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Chile_Gonzalez
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: CHL
Site: Chile_Gonzalez
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Chile_Sirlopu/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Chile_Sirlopu/Chile_Sirlopu_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Chile_Sirlopu/Chile_Sirlopu_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Chile_Sirlopu
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: CHL
Site: Chile_Sirlopu
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/China_Zhao/integrity_check.R
===== Loading data =====
Only has one SAV file
Raw Data: raw_data/China_Zhao/UCOM__China.sav
Rows dropped: 0
Reconstruct variables names
===== Calculate `duration_seconds`
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
No check for this! Only one data set
===== Writing results =====
Output path: cleaned_data/China_Zhao
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: CHN
Site: China_Zhao
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Colombia_Lopez/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Colombia_Lopez/Colombia_Lopez_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Colombia_Lopez/Colombia_Lopez_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Colombia_Lopez
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: COL
Site: Colombia_Lopez
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Colombia_Meister/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Colombia_Meister/Colombia_Meister_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Colombia_Meister/Colombia_Meister_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Colombia_Meister
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: COL
Site: Colombia_Meister
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/CostaRica_Castro/integrity_check.R
===== Loading data =====
Raw Data: raw_data/CostaRica_Castro/CostaRica_Castro_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/CostaRica_Castro/CostaRica_Castro_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/CostaRica_Castro
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: CRI
Site: CostaRica_Castro
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Croatia_Franc/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Croatia_Franc/Croatia_Franc_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Croatia_Franc/Croatia_Franc_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Croatia_Franc
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: HRV
Site: Croatia_Franc
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Croatia_Sucic/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Croatia_Sucic/Croatia_Sucic_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Croatia_Sucic/Croatia_Sucic_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Croatia_Sucic
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: HRV
Site: Croatia_Sucic
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Czech_Klocova/integrity_check.R
===== Loading data =====
Only numeric data
Calculating duration_seconds & add NA for Finished col

Raw Data: raw_data/Czech_Klocova/Czech_Klocova_NumericValues.csv
Rows dropped: 1
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
=== Renaming column variables ===
===== Checking =====
Only numeric data: NO Checked!
===== Writing results =====
Output path: cleaned_data/Czech_Klocova
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: CZE
Site: Czech_Klocova
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Ecuador_Orrego/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Ecuador_Orrego/Ecuador_Orrego_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Ecuador_Orrego/Ecuador_Orrego_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Ecuador_Orrego
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: ECU
Site: Ecuador_Orrego
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Ethiopia_Lemma/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Ethiopia_Lemma/Ethiopia_Lemma_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Ethiopia_Lemma/Ethiopia_Lemma_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Ethiopia_Lemma
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: ETH
Site: Ethiopia_Lemma
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/France_Redersdorff/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/France_Redersdorff/France_Redersdorff_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/France_Redersdorff/France_Redersdorff_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/France_Redersdorff
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: FRA
Site: France_Redersdorff
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/France_Regner/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/France_Regner/France_Regner_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/France_Regner/France_Regner_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/France_Regner
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: FRA
Site: France_Regner
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Geneva_Kulich/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Geneva_Kulich/Geneva_Kulich_Psychology_Numeric.csv
Rows dropped: 2
Raw Data: raw_data/Geneva_Kulich/Geneva_Science_Numeric.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Geneva_Kulich/Geneva_Kulich_Psychology_Choice.csv
Rows dropped: 2
Raw Data: raw_data/Geneva_Kulich/Geneva_Science_Choice.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
Parsing Date Format
===== Writing results =====
Output path: cleaned_data/Geneva_Kulich
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: CHE
Site: Geneva_Kulich
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Germany_Hoppe/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Germany_Hoppe/Germany_Hoppe_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Germany_Hoppe/Germany_Hoppe_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Germany_Hoppe
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: DEU
Site: Germany_Hoppe
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Germany_Steffens/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Germany_Steffens/Germany_Steffens_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Germany_Steffens/Germany_Steffens_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Germany_Steffens
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: DEU
Site: Germany_Steffens
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/India_Rani/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/India_Rani/India_Rani_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/India_Rani/India_Rani_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/India_Rani
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: IND
Site: India_Rani
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Indonesia_Avicenna/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Indonesia_Avicenna/Indonesia_Avicenna_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Indonesia_Avicenna/Indonesia_Avicenna_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Indonesia_Avicenna
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: IDN
Site: Indonesia_Avicenna
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Ireland_Bosak/integrity_check.R
===== Loading data =====
Only has one SAV file
raw_data/Ireland_Bosak/UCOM data_Ireland_FINAL_19.11.2018merged.sav
Rows dropped: 0
======= Create duration_seconds, startdate and enddate =======
Rename `Location` to `uni`....
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
======= Filtering out error entries =======
===== Checking =====
No check for this! Only one data set
===== Writing results =====
Output path: cleaned_data/Ireland_Bosak
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: IRL
Site: Ireland_Bosak
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Italy_Fridanna/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Italy_Fridanna/Italy_Fridanna_ChoiceValues.csv
Rows dropped: 0
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
No checking! Just one choice data set
===== Writing results =====
Output path: cleaned_data/Italy_Fridanna
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: ITA
Site: Italy_Fridanna
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Italy_Maricchiolo/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Italy_Maricchiolo/Italy_Maricchiolo_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Italy_Maricchiolo/Italy_Maricchiolo_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Italy_Maricchiolo
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: ITA
Site: Italy_Maricchiolo
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Japan_Sakata/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Japan_Sakata/Japan_Sakata_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Japan_Sakata/Japan_Sakata_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Japan_Sakata
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: JPN
Site: Japan_Sakata
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Kansas_Xian/integrity_check.R
===== Loading data =====
Only has one SAV file
Raw Data: raw_data/Kansas_Xian/UCOM_Kansas.sav
Rows dropped: 0
Reconstruct variables names
===== Calculate `duration_seconds`
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
No check for this! Only one data set
===== Writing results =====
Output path: cleaned_data/Kansas_Xian
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: USA
Site: Kansas_Xian
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Kobe_Keiko/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Kobe_Keiko/Kobe_Keiko_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Kobe_Keiko/Kobe_Keiko_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Convert StartDate EndDate =====
Conversion done.
===== Writing results =====
Output path: cleaned_data/Kobe_Keiko
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: JPN
Site: Kobe_Keiko
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Korea_Choi/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Korea_Choi/Korea_Choi_NumericValues.csv
Rows dropped: 1
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Korea_Choi/Korea_Choi_ChoiceValues.csv
Rows dropped: 1
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Korea_Choi
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: KOR
Site: Korea_Choi
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Kosovo_Berdyna/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Kosovo_Berdyna/Kosovo_Berdyna_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Kosovo_Berdyna/Kosovo_Berdyna_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Kosovo_Berdyna
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: XKX
Site: Kosovo_Berdyna
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Lebanon_Saab/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Lebanon_Saab/Lebanon_Saab_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Lebanon_Saab/Lebanon_Saab_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Tranformation =====
Add citizenship if not exist
===== Writing results =====
Output path: cleaned_data/Lebanon_Saab
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: LBN
Site: Lebanon_Saab
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Macedonia_Gjoneska/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Macedonia_Gjoneska/Macedonia_Gjoneska_HEED_Numeric.csv
Rows dropped: 1
Raw Data: raw_data/Macedonia_Gjoneska/Macedonia_Gjoneska_STEM_Numeric.csv
Rows dropped: 1
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
No checked! Only 2 numeric files provided.
===== Writing results =====
Output path: cleaned_data/Macedonia_Gjoneska
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: MKD
Site: Macedonia_Gjoneska
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Malaysia_Selvan/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Malaysia_Selvan/Malaysia_Selvan_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Malaysia_Selvan/Malaysia_Selvan_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Convert StartDate EndDate =====
Conversion done.
===== Writing results =====
Output path: cleaned_data/Malaysia_Selvan
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: MYS
Site: Malaysia_Selvan
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Nagoya_Keiko/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Nagoya_Keiko/Nagoya_Keiko_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Nagoya_Keiko/Nagoya_Keiko_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Convert StartDate EndDate =====
Conversion done.
===== Writing results =====
Output path: cleaned_data/Nagoya_Keiko
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: JPN
Site: Nagoya_Keiko
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Netherlands_Otten/integrity_check.R
===== Loading data =====
Only has one SAV file
raw_data/Netherlands_Otten/Mannen_en_vrouwen_in_de_Nederlandse_maatschappij_December 21, 2018_12.05.sav
Rows dropped: 0
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
=========== Fixing variable names !! ===========
===== Checking =====
No check for this! Only one data set
===== Writing results =====
Output path: cleaned_data/Netherlands_Otten
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: NLD
Site: Netherlands_Otten
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Netherlands_Vink/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Netherlands_Vink/Netherlands_Vink_NumericValues.csv
Rows dropped: 0
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Netherlands_Vink/Netherlands_Vink_ChoiceValues.sav
Rows dropped: 0
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Netherlands_Vink
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: NLD
Site: Netherlands_Vink
=== Writing out CSV ===
Sucessfully write results!



Script: ./src/sites-spec/NewZealand_McNamara/integrity_check.R
===== Loading data =====
Only Choice data available for this site
Raw Data: raw_data/NewZealand_McNamara/NewZealand_McNamara_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
Only Choice data: NO checked!
===== Writing results =====
Output path: cleaned_data/NewZealand_McNamara
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: NZL
Site: NewZealand_McNamara
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Norway_Olsson/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Norway_Olsson/Norway_Olsson_Part1_NumericValues.csv
Rows dropped: 2
Raw Data: raw_data/Norway_Olsson/Norway_Olsson_Part2_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Norway_Olsson/Norway_Olsson_Part1_ChoiceValues.csv
Rows dropped: 2
Raw Data: raw_data/Norway_Olsson/Norway_Olsson_Part2_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Norway_Olsson
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: NOR
Site: Norway_Olsson
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Pakistan_Bushra/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Pakistan_Bushra/Pakistan_Bushra_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Pakistan_Bushra/Pakistan_Bushra_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Pakistan_Bushra
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: PAK
Site: Pakistan_Bushra
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Pakistan_Hassan/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Pakistan_Hassan/Pakistan_Hassan_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Pakistan_Hassan/Pakistan_Hassan_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Pakistan_Hassan
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: PAK
Site: Pakistan_Hassan
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Poland_Adamus/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Poland_Adamus/Poland_Adamus_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Poland_Adamus/Poland_Adamus_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Poland_Adamus
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: POL
Site: Poland_Adamus
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Poland_Kosakowska/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Poland_Kosakowska/Poland_Kosakowska_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Poland_Kosakowska/Poland_Kosakowska_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Poland_Kosakowska
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: POL
Site: Poland_Kosakowska
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Poland_Pyrkosz/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Poland_Pyrkosz/Poland_Pyrkosz_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Poland_Pyrkosz/Poland_Pyrkosz_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Poland_Pyrkosz
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: POL
Site: Poland_Pyrkosz
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Romania_Birneanu/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Romania_Birneanu/Romania_Birneanu_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Romania_Birneanu/Romania_Birneanu_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Romania_Birneanu
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: ROU
Site: Romania_Birneanu
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Serbia_Jaksic/integrity_check.R
===== Loading data =====
=== Creating NA startdate, enddate, duration_seconds, finished ===
Raw Data: raw_data/Serbia_Jaksic/Serbia_Jaksic_NumericValues.csv
Rows dropped: 0
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Serbia_Jaksic/Serbia_Jaksic_ChoiceValues.csv
Rows dropped: 0
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
===== Converting orientaion_1 & _2 into valid values =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Serbia_Jaksic
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: SRB
Site: Serbia_Jaksic
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Serbia_Zezelj/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Serbia_Zezelj/Serbia_Zezelj_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Serbia_Zezelj/Serbia_Zezelj_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Serbia_Zezelj
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: SRB
Site: Serbia_Zezelj
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Singapore_Lee/integrity_check.R
===== Loading data =====
==== This site only has Choice data
(though also has a SAV file but it is the same as the choice value data )===
Raw Data: raw_data/Singapore_Lee/Singapore_Lee_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
Only choice value : NO Checked!
===== Writing results =====
Output path: cleaned_data/Singapore_Lee
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: SGP
Site: Singapore_Lee
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Slovakia_Fedakova/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Slovakia_Fedakova/Slovakia_Fedakova_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Slovakia_Fedakova/Slovakia_Fedakova_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Slovakia_Fedakova
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: SVK
Site: Slovakia_Fedakova
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Spain_Gartzia/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Spain_Gartzia/Spain_Gartzia_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Spain_Gartzia/Spain_Gartzia_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
Mapping & correcting Spain variables 
Parsed with column specification:
cols(
  original = col_character(),
  normal = col_character()
)
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Spain_Gartzia
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: ESP
Site: Spain_Gartzia
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Spain_Lemus/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Spain_Lemus/Spain_Lemus_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Spain_Lemus/Spain_Lemus_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
Mapping & correcting Spain variables 
Parsed with column specification:
cols(
  original = col_character(),
  normal = col_character()
)
[1] TRUE
Checked: passed!
===== Writing results =====
Output path: cleaned_data/Spain_Lemus
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: ESP
Site: Spain_Lemus
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Sweden_Back/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Sweden_Back/Sweden_Back_HEED_numeric.csv
Rows dropped: 2
Raw Data: raw_data/Sweden_Back/Sweden_Back_Psychology_Numeric.csv
Rows dropped: 2
Raw Data: raw_data/Sweden_Back/Sweden_Back_STEM_numeric.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Sweden_Back/Sweden_Back_HEED_Choice.csv
Rows dropped: 2
Raw Data: raw_data/Sweden_Back/Sweden_Back_Psychology_Choice.csv
Rows dropped: 2
Raw Data: raw_data/Sweden_Back/Sweden_Back_STEM_choice.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Sweden_Back
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: SWE
Site: Sweden_Back
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Switzerland_Haessler/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Switzerland_Haessler/Switzerland_Haessler.csv
Rows dropped: 0
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
No Checked! This site just contains one numeric dataset.
===== Writing results =====
Output path: cleaned_data/Switzerland_Haessler
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: CHE
Site: Switzerland_Haessler
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Switzerland_Nikitin/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Switzerland_Nikitin/Switzerland_Nikitin_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Switzerland_Nikitin/Switzerland_Nikitin_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Switzerland_Nikitin
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: CHE
Site: Switzerland_Nikitin
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Switzerland_Sczesny/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Switzerland_Sczesny/Switzerland_Sczesny_Part1_numeric.csv
Rows dropped: 2
Raw Data: raw_data/Switzerland_Sczesny/Switzerland_Sczesny_Part2_numeric.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Switzerland_Sczesny/Switzerland_Sczesny_Part1_choice.csv
Rows dropped: 2
Raw Data: raw_data/Switzerland_Sczesny/Switzerland_Sczesny_Part2_choice.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Switzerland_Sczesny
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: CHE
Site: Switzerland_Sczesny
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Tanzania_Mkamwa/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Tanzania_Mkamwa/Tanzania_Mkamwa_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
Two dataset seem to be bot ChoiceValues: No checked!
===== Writing results =====
Output path: cleaned_data/Tanzania_Mkamwa
===== Data Conversion =====
===== Check Numeric Vars Range =====
"orientation_1" - has all NAs.
"expected_share_1" - has all NAs.
"expected_share_2" - has all NAs.
"expected_share_3" - has all NAs.
"exp_encouragement_1" - has all NAs.
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: TZA
Site: Tanzania_Mkamwa
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Turkey_Gungor/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Turkey_Gungor/Turkey_Gungor_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Turkey_Gungor/Turkey_Gungor_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Turkey_Gungor
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: TUR
Site: Turkey_Gungor
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Turkey_Kunurgu/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Turkey_Kunurgu/Turkey_Kunurgu_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Turkey_Kunurgu/Turkey_Kunurgu_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Turkey_Kunurgu
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: TUR
Site: Turkey_Kunurgu
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/UK_Kirby/integrity_check.R
===== Loading data =====
=== Converting and calculating duration_seconds ===
Raw Data: raw_data/UK_Kirby/UK_Kirby_NumericValues.csv
Rows dropped: 1
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/UK_Kirby/UK_Kirby_ChoiceValues.csv
Rows dropped: 1
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/UK_Kirby
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: GBR
Site: UK_Kirby
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/USA_Bosson/integrity_check.R
===== Loading data =====
Raw Data: raw_data/USA_Bosson/USA_Bosson_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/USA_Bosson/USA_Bosson_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/USA_Bosson
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: USA
Site: USA_Bosson
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/USA_Devos/integrity_check.R
===== Loading data =====
Raw Data: raw_data/USA_Devos/USA_Devos_NumericValues.csv
Rows dropped: 0
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/USA_Devos/USA_Devos_ChoiceValues.sav
Rows dropped: 0
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/USA_Devos
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: USA
Site: USA_Devos
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/USA_Diekman/integrity_check.R
===== Loading data =====
Raw Data: raw_data/USA_Diekman/USA_Diekman_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/USA_Diekman/USA_Diekman_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
Parsing timestampe format
===== Writing results =====
Output path: cleaned_data/USA_Diekman
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: USA
Site: USA_Diekman
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/USA_Germano/integrity_check.R
===== Loading data =====
Raw Data: raw_data/USA_Germano/USA_Germano_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/USA_Germano/USA_Germano_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Convert StartDate EndDate =====
Conversion done.
===== Writing results =====
Output path: cleaned_data/USA_Germano
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: USA
Site: USA_Germano
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/USA_Rivera-Rodriguez/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/USA_Rivera-Rodriguez/USA_Rivera-Rodriguez_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/USA_Rivera-Rodriguez/USA_Rivera-Rodriguez_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/USA_Rivera-Rodriguez
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: USA
Site: USA_Rivera-Rodriguez
=== Writing out CSV ===
Sucessfully write results!



Script: src/sites-spec/Ukraine_Kozytska/integrity_check_template.R
===== Loading data =====
Raw Data: raw_data/Ukraine_Kozytska/Ukraine_Kozytska_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Ukraine_Kozytska/Ukraine_Kozytska_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Ukraine_Kozytska
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: UKR
Site: Ukraine_Kozytska
=== Writing out CSV ===
Sucessfully write results!



Script: ./src/sites-spec/Waterloo_Bergsieker/integrity_check.R
===== Loading data =====
Raw Data: raw_data/Waterloo_Bergsieker/Waterloo_Bergsieker_NumericValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
Raw Data: raw_data/Waterloo_Bergsieker/Waterloo_Bergsieker_ChoiceValues.csv
Rows dropped: 2
Apply to_lower to all names...
Renaming Duration_seconds...
Mapping other variables names...
===== Checking =====
[1] TRUE
Checked: Passed!
===== Writing results =====
Output path: cleaned_data/Waterloo_Bergsieker
===== Data Conversion =====
===== Check Numeric Vars Range =====
===== Preparing country code & site =====
=== Writing data summary ===
=== Writing variables ===
Country: CAN
Site: Waterloo_Bergsieker
=== Writing out CSV ===
Sucessfully write results!



Script: src/merge_data.R
===== Setting up path =====
===== Loading & Merging data =====
Other non-numeric variables to include:
Variables: country, site, gender, duration_seconds, finished, startdate, enddate, course, study_year, citizenship, expect_child, livingsituation, mother_field, father_field, upbringing, religion, sexual_orientation, immigration_backgrou, migration_background, ethnic_background, marital_status, comments, not_use, uni, per_leave, per_workhour, parentleave_expectat, 
Config file: src/other_vars.json
Loading data sets.....
Data: cleaned_data/Albania_Jasini/albania_jasini.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Arizona_Croft/arizona_croft.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Australia_Anderson/australia_anderson.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Australia_DarNimrod/australia_darnimrod.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Belgium_Vangrootel/belgium_vangrootel.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Canada_Block/canada_block.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Canada_Hall/canada_hall.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Canada_Steele/canada_steele.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/China_Zhao/china_zhao.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Colombia_Lopez/colombia_lopez.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Colombia_Meister/colombia_meister.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Czech_Klocova/czech_klocova.csv 
 Unknown columns `immigration_backgrou` and `parentleave_expectat`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Geneva_Kulich/geneva_kulich.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Germany_Hoppe/germany_hoppe.csv 
 Unknown column `ethnic_background`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Germany_Steffens/germany_steffens.csv 
 Unknown column `ethnic_background`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Kansas_Xian/kansas_xian.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Korea_Choi/korea_choi.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Kosovo_Berdyna/kosovo_berdyna.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Lebanon_Saab/lebanon_saab.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Macedonia_Gjoneska/macedonia_gjoneska.csv 
 Unknown column `immigration_backgrou`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Malaysia_Selvan/malaysia_selvan.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Netherlands_Otten/netherlands_otten.csv 
 Unknown columns `migration_background` and `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Netherlands_Vink/netherlands_vink.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/NewZealand_McNamara/newzealand_mcnamara.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Norway_Olsson/norway_olsson.csv 
 Unknown column `ethnic_background`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Poland_Adamus/poland_adamus.csv 
 Unknown columns `study_year` and `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Poland_Kosakowska/poland_kosakowska.csv 
 Unknown columns `study_year` and `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Poland_Pyrkosz/poland_pyrkosz.csv 
 Unknown columns `study_year` and `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Serbia_Zezelj/serbia_zezelj.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Singapore_Lee/singapore_lee.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Slovakia_Fedakova/slovakia_fedakova.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Spain_Gartzia/spain_gartzia.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Spain_Lemus/spain_lemus.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Switzerland_Haessler/switzerland_haessler.csv 
 Unknown columns `immigration_backgrou` and `ethnic_background`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Switzerland_Nikitin/switzerland_nikitin.csv 
 Unknown column `ethnic_background`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Switzerland_Sczesny/switzerland_sczesny.csv 
 Unknown column `ethnic_background`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Tanzania_Mkamwa/tanzania_mkamwa.csv 
 Unknown column `ethnic_background`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Turkey_Gungor/turkey_gungor.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Turkey_Kunurgu/turkey_kunurgu.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/UK_Kirby/uk_kirby.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/USA_Bosson/usa_bosson.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/USA_Devos/usa_devos.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/USA_Diekman/usa_diekman.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/USA_Rivera-Rodriguez/usa_rivera-rodriguez.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)Data: cleaned_data/Waterloo_Bergsieker/waterloo_bergsieker.csv 
 Unknown column `uni`  
 Add new columns as NAs 

Backtrace:
     █
  1. └─purrr::map2(...)
  2.   └─ucom:::.f(.x[[i]], .y[[i]], ...)
  3.     ├─base::tryCatch(...)
  4.     │ └─base:::tryCatchList(expr, classes, parentenv, handlers)
  5.     │   └─base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6.     │     └─base:::doTryCatch(return(expr), name, parentenv, handler)
  7.     ├─base::eval(test)
  8.     │ └─base::eval(test)
  9.     └─df %>% dplyr::select(all_vars)
 10.       ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
 11.       └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 12.         └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
 13.           └─ucom:::`_fseq`(`_lhs`)
 14.             └─magrittr::freduce(value, `_function_list`)
 15.               ├─base::withVisible(function_list[[k]](value))
 16.               └─function_list[[k]](value)
 17.                 ├─dplyr::select(., all_vars)
 18.                 └─dplyr:::select.data.frame(., all_vars)
 19.                   └─tidyselect::vars_select(sel_vars(.data), !!!quos(...))
 20.                     └─tidyselect:::vars_select_eval(.vars, quos)
 21.                       └─purrr::map_if(ind_list, is_character, match_strings, names = TRUE)
 22.                         └─purrr::map(.x[sel], .f, ...)
 23.                           └─tidyselect:::.f(.x[[i]], ...)
 24.                             └─tidyselect:::bad_unknown_vars(vars, unknown)**********************************************
Do some conversions before merging.......
Merging all the data set....
Checking numeric.....
Is all numeric: TRUE
===== Results Summary =====
Data Dimension: 33975 rows, 189 columns.
===== Writing results =====
Numeric range: aggregated_data/num_range.json
Check: same numeric range as predefined.
[1] TRUE
Writing num_range.json file.
Aggregated CSV: aggregated_data/aggregated_clean.csv
Non-numeric unique values: aggregated_data/non_num_unique.json
Only for unique values below 100.
Excluded variables: aggregated_data/exc_vars.json
Number of excluded variables: 351
Done!
